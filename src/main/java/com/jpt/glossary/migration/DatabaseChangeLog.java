package com.jpt.glossary.migration;

import com.github.cloudyrock.mongock.ChangeLog;
import com.github.cloudyrock.mongock.ChangeSet;
import com.jpt.glossary.model.Term;
import com.jpt.glossary.repository.TermRepository;

import java.util.ArrayList;
import java.util.List;

/**
 * @author Maksim Zaikov (maxim.zaykov97@gmail.com)
 * @version 1.0
 */
@ChangeLog
public class DatabaseChangeLog {

    @ChangeSet(order = "001", id = "seedDatabase", author = "mzaikov")
    public void seedDatabase(TermRepository repository) {
        List<Term> terms = new ArrayList<>();

        terms.add(new Term("Реактивное программирование", " парадигма программирования, ориентированная на потоки данных и распространение изменений. Это означает, что должна существовать возможность легко выражать статические и динамические потоки данных, а также то, что нижележащая модель исполнения должна автоматически распространять изменения благодаря потоку данных."));
        terms.add(new Term("Микросервисная архитектура", "вариант сервис-ориентированной архитектуры программного обеспечения, направленный на взаимодействие насколько это возможно небольших, слабо связанных и легко изменяемых модулей — микросервисов"));
        terms.add(new Term("Отказоустойчивость", "свойство технической системы сохранять свою работоспособность после отказа одной или нескольких её составных частей"));
        terms.add(new Term("REST", "архитектурный стиль взаимодействия компонентов распределённого приложения в сети"));
        terms.add(new Term("HTTP", "протокол прикладного уровня передачи данных, изначально — в виде гипертекстовых документов в формате HTML, в настоящее время используется для передачи произвольных данных"));
        terms.add(new Term("RabbitMQ", "программный брокер сообщений на основе стандарта AMQP — тиражируемое связующее программное обеспечение, ориентированное на обработку сообщений"));
        terms.add(new Term("AMQP", "открытый протокол для передачи сообщений между компонентами системы"));
        terms.add(new Term("ZeroMQ", "высокопроизводительная асинхронная библиотека обмена сообщениями, ориентированная на использование в распределённых и параллельных вычислениях"));
        terms.add(new Term("RPC", "(удалённый вызов процедур) — класс технологий, позволяющих программам вызывать функции или процедуры в другом адресном пространстве (на удалённых узлах, либо в независимой сторонней системе на том же узле)"));
        terms.add(new Term("Сериализация", "процесс перевода структуры данных в последовательность байтов"));
        terms.add(new Term("TCP", "протокол управления передачей"));
        terms.add(new Term("UDP", "протокол пользовательских датаграмм"));
        terms.add(new Term("Finagle", "это расширяемая система RPC для JVM, используемая для создания серверов с высокой степенью параллелизма"));
        terms.add(new Term("Hystrix", "библиотека задержек и отказоустойчивости, которая помогает контролировать взаимодействие между службами, обеспечивая отказоустойчивость и устойчивость к задержкам, благодаря чему повышается устойчивость всей системы в целом"));
        terms.add(new Term("Apache Kafka", "распределённый программный брокер сообщений, проект с открытым исходным кодом, разрабатываемый в рамках фонда Apache"));
        terms.add(new Term("Proxygen", "это набор библиотек C++, который упрощает создание клиентов, серверов и прокси"));
        terms.add(new Term("Resilience4j", "это легковесная и простая в использовании библиотека отказоустойчивости"));

        repository.saveAll(terms);
    }
}
